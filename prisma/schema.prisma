// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(uuid())

  userClerkId String   @unique
  email String @unique
  name String
  imageURL String @db.Text

  favorites Favorite[]
  conversations Conversation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Favorite {
  id String @id @default(uuid())

  bookId String

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

 model Conversation {
  id String @id @default(uuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookId String

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

    @@unique([userId, bookId])

 }

 model Message {
  id String @id @default(uuid())
  userQuestion String
  chatGPTResponse String

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
 }

model UserLimit {
  id String @id @default(uuid())
  userId String @unique

  count Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model UserSubscription {
  id String @id @default(uuid())
  userId String @unique

  stripeCustomerId String? @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId String? @unique @map(name:"stripe_subscription_id")
  stripePriceId String? @unique @map(name:"stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end") 
  
}
